# This file is loaded for interactive shells after .zprofile

# May need to manually set your language environment
# export LANG=en_US.UTF-8

# export MY_BIN=$HOME/bin
# if [ "$MY_BIN" ]; then
#   export MY_BINSRC="$MY_BIN/src" #dir of files to be sourced automatically if executable
# fi

# export MY_NOBACKUP=$HOME/NOBACKUP
# [ -d "$MY_NOBACKUP" ] || mkdir "$MY_NOBACKUP"

# $TEMP is used by many apps (e.g. gs, ps2pdf, gksudo)
# Must use actual resolved directory since root will not have permissions to a mounted home directory or its subdirs
if [ -e "$HOME/.tmp" ]; then
  cd -P "$HOME/.tmp"
  export TEMP=`pwd -P`
  cd - > /dev/null

  # Some apps use different variables
  export TMPDIR=$TEMP
  export TMP=$TEMP

  export MY_TRASH="$TMP/trash"
  [ -d "$MY_TRASH" ] || mkdir "$MY_TRASH"

  trash(){
      for F in "$@"; do
          DESTDIR="$MY_TRASH/`pwd`/`dirname "$F"`";
          mkdir -p "$DESTDIR"
          mv -fv "$F" "$DESTDIR"
      done
  }
  utrash(){
    mv -v $MY_TRASH/`pwd`/$* `pwd`
  }
fi


########## The following is only run when shell is interactive ######################

# Speed up zsh:
# https://blog.mattclemente.com/2020/06/26/oh-my-zsh-slow-to-load.html#a-note-on-profiling-with-zshzprof
# https://medium.com/@dannysmith/little-thing-2-speeding-up-zsh-f1860390f92
# zmodload zsh/zprof
# For detailed trace: zsh -lxv

# Uncomment the following to log timing
# timer=$(($(gdate +%s%N)/1000000))
function __ECHO_TIMER(){
  if [ "$timer" ]; then
    now=$(($(gdate +%s%N)/1000000))
    elapsed=$(($now-$timer))
    echo "$elapsed: \t$1" >&2
    timer=$now
  fi
}

# Path to oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load -- https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="myaussiegeek"
# ZSH_THEME="avit"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Auto updates will cause the ~/.oh-my-zsh directory to drift out of sync with chezmoi's source state.
# https://www.chezmoi.io/user-guide/include-files-from-elsewhere/#include-a-subdirectory-from-a-url
# To update Oh My Zsh and its plugins, refresh the downloaded archives: chezmoi --refresh-externals apply
# instead of manually updating OMZ: upgrade_oh_my_zsh
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"
[ -f "$HOME/.dir_colors.src" ] && . $HOME/.dir_colors.src

# Uncomment the following line to disable auto-setting terminal title.
# called when rendering command prompt
DISABLE_AUTO_TITLE="true"
_my_title_precmd(){
  # Allows my functions to set the window title
  if [ "$MY_WINDOWTITLE" ]; then
    echo -ne "\033]0;${MY_WINDOWTITLE}\007"
  else
    local SHORT_PWD=`echo ${PWD/$HOME/\~} | sed 's:\([^/][^/][^/]\)[^/]*/:\1/:g'`
    echo -ne "\033]0;${SHORT_PWD}\007"
  fi
}
precmd_functions=(_my_title_precmd $precmd_functions)

# http://zsh.sourceforge.net/Doc/Release/Options.html
setopt CORRECT    # shell will make a guess of what you meant to type and ask whether you want do

# Uncomment the following line to enable command auto-correction.
#ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="%m/%d %H:%M"

# http://www.bash2zsh.com/zsh_refcard/refcard.pdf
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found when searching.
setopt HIST_REDUCE_BLANKS        # removes blank lines from history
# http://zsh.sourceforge.net/Doc/Release/Options.html
setopt HIST_SAVE_NO_DUPS        # When writing out the history file, duplicate are omitted
setopt HIST_IGNORE_ALL_DUPS     # older duplicate command is removed
# The following will be set by $ZSH/lib/history.zsh
# setopt HIST_EXPIRE_DUPS_FIRST   # Expire duplicate entries first when trimming history.
# setopt HIST_IGNORE_DUPS         # ignore duplicates of the previous event
# setopt HIST_IGNORE_SPACE        # when the first character on the line is a space
__ECHO_TIMER "setopt"

# hook function "Executed when a history line has been read interactively, but before it is executed."
zshaddhistory() {
    local line=${1%%$'\n'}
    local cmd=${line%% *}
    # Only those that satisfy all of the following conditions are added to the history
    [[ ${#line} -ge 3
       && ${cmd} != l
    ]]
}
# zshaddhistory

# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238#issuecomment-389324292
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}
pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# `C-x a` to expand an alias
# bindkey "^Xa" _expand_alias
zstyle ':completion:*' completer _expand_alias _complete _ignored


# https://superuser.com/questions/446594/separate-up-arrow-lookback-for-local-and-global-zsh-history
# https://superuser.com/questions/714412/zsh-or-maybe-oh-my-zsh-history-gets-confused-with-multi-line-commands
bindkey "OA" up-line-or-local-history
bindkey "[A" up-line-or-local-history
bindkey "OB" down-line-or-local-history
bindkey "[B" down-line-or-local-history

up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-search
    zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-search
    zle set-local-history 0
}
zle -N down-line-or-local-history

bindkey "^[[1;5A" up-line-or-history    # [CTRL] + Cursor up
bindkey "^[[1;5B" down-line-or-history  # [CTRL] + Cursor down

# TIP: `bindkey -M emacs` to list bindings for a emacs keymap
# `zle -al` shows possible commands for binding

# Reminder: kitty.conf: macos_option_as_alt left
bindkey '\M-.' insert-last-word
# See kitty.conf: bindkey '\C-.' insert-last-word
# iTerm: https://gist.github.com/YumaInaura/27bb1f79881a63bed2fb9635cbaed73b
bindkey ≥ insert-last-word

__ECHO_TIMER "bindkey"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.

## App-specific configurations

if [ "$HOMEBREW_PREFIX" ]; then
  # To create file: $(brew --prefix)/opt/fzf/install
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  __ECHO_TIMER "fzf"
fi

### Lazy-initializers

# When the app is first run, function _bootstrap_$APP() is run.
# If no args are provided, then the specified DEFAULT_APP_CMD is run.
DEFAULT_APP_CMDS=(
  "nnn"
  "conda env list"
  "go"
)
for DEFAULT_APP_CMD in $DEFAULT_APP_CMDS; do
  local APP=${DEFAULT_APP_CMD%% *}
  eval "function $APP(){
    unfunction $APP
    # echo \"(lazy loading: $APP)\"
    _bootstrap_$APP
    if [ \"\$1\" ]; then
      eval $APP \"\$@\"
    else
      eval $DEFAULT_APP_CMD
    fi
  }"
done

_bootstrap_nnn(){
  # bookmarks
  export NNN_BMS='s:~/Desktop;d:~/Documents;D:~/Downloads/;a:~/DockApps;v:~/dev'
}
_bootstrap_conda(){
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/Users/yoom/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/Users/yoom/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/Users/yoom/anaconda3/etc/profile.d/conda.sh"
      else
          export PATH="/Users/yoom/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<  
}
_bootstrap_go(){
  source ~/.golangrc
}
# _bootstrap_nvm(){
#   export NVM_DIR="$HOME/.nvm"
#   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#   [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# }
_bootstrap_heroku(){
  # heroku autocomplete setup
  HEROKU_AC_ZSH_SETUP_PATH=~/Library/Caches/heroku/autocomplete/zsh_setup
  test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH
}



# icu4c is keg-only, which means it was not symlinked into /usr/local,
# because macOS provides libicucore.dylib (but nothing else).
#
# If you need to have icu4c first in your PATH run:
#   echo 'export PATH="/usr/local/opt/icu4c/bin:$PATH"' >> ~/.zshrc
#   echo 'export PATH="/usr/local/opt/icu4c/sbin:$PATH"' >> ~/.zshrc
#
# For compilers to find icu4c you may need to set:
#   export LDFLAGS="-L/usr/local/opt/icu4c/lib"
#   export CPPFLAGS="-I/usr/local/opt/icu4c/include"
#
# For pkg-config to find icu4c you may need to set:
#   export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig"


#used for installing iruby for Jupyter
#export GEM_HOME="$HOME/.gem"
#PATH=$GEM_HOME/bin:$PATH


# https://sw.kovidgoyal.net/kitty/index.html#zsh
# https://gist.github.com/ctechols/ca1035271ad134841284#gistcomment-2308206
setopt extendedglob

# https://scriptingosx.com/2019/07/moving-to-zsh-part-5-completions/
autoload -Uz compinit
__ECHO_TIMER "autoload compinit"
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C
__ECHO_TIMER "compinit"

# Completion for kitty
# kitty + complete setup zsh | source /dev/stdin
# __ECHO_TIMER "autocompletions: kitty"

__ECHO_TIMER "Done zshrc part 1"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
__ECHO_TIMER "p10k"

if [ "$HOMEBREW_PREFIX" ]; then
  # TODO: replace asdf and direnv with mise: https://mise.jdx.dev/faq.html#how-do-i-migrate-from-asdf
  #   My also be able to replace functionality in chpwd_functions
  #   There's a OMZ mise plugin
  # Instead of using the asdf zsh plugin
  # https://github.com/ohmyzsh/ohmyzsh/issues/10484#issuecomment-997545691
  unset ASDF_DIR
  source $(brew --prefix asdf)/libexec/asdf.sh
  # TIP: `asdf reshim python` after a `pip install` https://til.hashrocket.com/posts/ques11vrjs-get-pip-installed-executables-into-the-asdf-path
  __ECHO_TIMER "asdf"
fi

# Plugins are in $ZSH_CUSTOM
# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# For zsh-nvm plugin -- https://github.com/lukechilds/zsh-nvm?tab=readme-ov-file#lazy-loading
export NVM_LAZY_LOAD=true
export NVM_COMPLETION=true

# Reminder to add new plugins to .chezmoiexternal.toml
plugins=(
  # common-aliases
  gnu-utils
  dotenv
  # gh
  # history
  zsh-interactive-cd
  z
  # git
  sublime
  # chezmoi
  #codeclimate
  # Remember to replace `eval ...` calls with `_evalcache ...`; ~/.zsh-evalcache/
  evalcache
  # slow:
  zsh-autosuggestions
  # slow:
  # rbenv

  # Instead, manually run `omz update && upgrade_oh_my_zsh_custom`
  # autoupdate

  # poetry

  # Must be last plugin to compute highlighting for the current command-line buffer
  zsh-syntax-highlighting
)

# TODO: remove OS-specific conditional; do we need zsh-nvm or can it be loaded by .env?
: ${SHORT_HOST:=`hostname -s`}
if [ `uname -o` = "Darwin" ]; then
  plugins+=(
    poetry
    # lazy-load nvm; Actual loading of nvm is triggered by running the nvm, node, npm, ...
    zsh-nvm
  )
fi

# Uncomment the following to time each plugin or temporarily modify $ZSH/oh-my-zsh.sh
# TIME_PLUGINS="true"
if [ "$TIME_PLUGINS" ]; then
  for plugin ($plugins); do
    if [ -f $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh ]; then
      source $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh
    elif [ -f $ZSH/plugins/$plugin/$plugin.plugin.zsh ]; then
      source $ZSH/plugins/$plugin/$plugin.plugin.zsh
    fi
    __ECHO_TIMER "(plugin) $plugin"
  done
fi

__ECHO_TIMER "___ oh-my-zsh.sh"
source $ZSH/oh-my-zsh.sh
__ECHO_TIMER "^^^ oh-my-zsh.sh"

alias dateStr='date +%Y-%m-%d-%T'

alias dockr_jupyter='echo "Running on port 8890"; docker run -p 8890:8888 -v `pwd`:/home/jovyan/on_host jupyter/scipy-notebook'
alias dockr_jupyter_ruby='echo "Running on port 8891"; docker run -p 8891:8888 -v `pwd`:/home/jovyan/on_host rubydata/datascience-notebook'

source ~/.alias
__ECHO_TIMER "funcs and aliases"

# to hide the “user@hostname” info when you’re logged in as yourself on your local machine
#prompt_context(){}
#export PROMPT="$fg_bold[blue][ $fg[red]%t $fg_bold[blue]] $fg_bold[blue] [ $fg[red]%~ $(git_prompt_info)$fg[yellow]$(rvm_prompt_info)$fg_bold[blue] ]$reset_color
# $ "


# eval "$(direnv hook zsh)"
# _evalcache direnv hook zsh

# _my_conda_env(){
#   # Export MY_CONDA_ENV in the .envrc file
#   [ "$MY_CONDA_ENV" ] || return
#   conda activate "$MY_CONDA_ENV"
#   unset MY_CONDA_ENV
# }
# zsh special hook function when changing directory
# chpwd_functions+=(_my_conda_env)

# pnpm
# export PNPM_HOME="~/Library/pnpm"
# case ":$PATH:" in
#   *":$PNPM_HOME:"*) ;;
#   *) export PATH="$PNPM_HOME:$PATH" ;;
# esac
# pnpm end


# export NVM_DIR="$HOME/.nvm"
# [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
# __ECHO_TIMER "nvm"

# Reminder from Homebrew
# If you don't want/need a background service you can just run:
#  /opt/homebrew/opt/postgresql@14/bin/postgres -D /opt/homebrew/var/postgresql@14

# TODO: remove OS-specific conditional
if [ `uname -o` = "Darwin" ]; then
  #. "$HOME/.atuin/bin/env"
  export PATH="$HOME/.atuin/bin:$PATH"
  _evalcache atuin init zsh
  __ECHO_TIMER "atuin"
fi

[ "$PWD" = "$HOME" ] || a
__ECHO_TIMER "a"

__ECHO_TIMER "Done zshrc"